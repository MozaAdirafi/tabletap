"use client";

import { useState, useEffect } from "react";
import { clsx } from "clsx";
import { Card, CardContent } from "@/components/ui/Card";
import { Button } from "@/components/ui/Button";
import { Badge } from "@/components/ui/Badge";
import { Input } from "@/components/ui/Input";
import { EmptyState } from "@/components/shared/EmptyState";
import { MenuItemForm } from "@/components/admin/MenuItemForm";
import { useAuth } from "@/lib/context/AuthContext";
import {
  getMenuItemsFromDB,
  getMenuCategoriesFromDB,
  addMenuItemToDB,
  updateMenuItemInDB,
  deleteMenuItemFromDB,
  addMenuCategoryToDB,
  subscribeToMenuItems,
} from "@/lib/firebase/firestore";

interface MenuItem {
  id: number;
  name: string;
  description: string;
  price: number;
  categoryId: string;
  imageSrc?: string;
  tags: string[];
  available: boolean;
}

interface MenuCategory {
  id: string;
  name: string;
}

export default function MenuManagementPage() {
  const { user } = useAuth();
  const [categories, setCategories] = useState<MenuCategory[]>([]);
  const [menuItems, setMenuItems] = useState<MenuItem[]>([]);
  const [activeCategory, setActiveCategory] = useState<string>("");
  const [isAddingCategory, setIsAddingCategory] = useState(false);
  const [newCategoryName, setNewCategoryName] = useState("");
  const [isAddingItem, setIsAddingItem] = useState(false);
  const [editingItem, setEditingItem] = useState<MenuItem | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  // Load initial data
  useEffect(() => {
    if (!user) return;

    const loadData = async () => {
      try {
        const [items, cats] = await Promise.all([
          getMenuItemsFromDB(user.uid),
          getMenuCategoriesFromDB(user.uid),
        ]);
        setMenuItems(items);
        setCategories(cats);
        if (cats.length > 0) {
          setActiveCategory(cats[0].id);
        }
        setIsLoading(false);
      } catch (error) {
        console.error("Error loading menu data:", error);
        setIsLoading(false);
      }
    };

    // Subscribe to real-time menu updates
    const unsubscribe = subscribeToMenuItems(user.uid, (updatedItems) => {
      setMenuItems(updatedItems);
    });

    loadData();
    return () => unsubscribe();
  }, [user]);

  const filteredItems = menuItems.filter(
    (item) => item.categoryId === activeCategory
  );

  // Handler for adding a new category
  const handleAddCategory = async () => {
    if (!user || !newCategoryName.trim()) return;

    try {
      const newCategory = {
        id: newCategoryName.toLowerCase().replace(/\s+/g, "-"),
        name: newCategoryName,
      };

      await addMenuCategoryToDB(user.uid, newCategory);
      setCategories([...categories, newCategory]);
      setNewCategoryName("");
      setIsAddingCategory(false);
      setActiveCategory(newCategory.id);
    } catch (error) {
      console.error("Error adding category:", error);
    }
  };

  // Handler for adding a new item
  const handleAddItem = async (itemData: Omit<MenuItem, "id">) => {
    if (!user || !activeCategory) return;

    try {
      // Using a placeholder image for all items
      const placeholderImageUrl = "https://placehold.co/600x400/orange/white?text=Food+Item";

      await addMenuItemToDB(user.uid, {
        ...itemData,
        categoryId: activeCategory,
        imageSrc: placeholderImageUrl,
      });
      setIsAddingItem(false);
      alert("Item added successfully!");
    } catch (error) {
      console.error("Error adding menu item:", error);
      alert("Failed to add menu item. Please try again.");
    }
  };

  // Handler for updating an item
  const handleUpdateItem = async (item: MenuItem) => {
    if (!user) return;

    try {
      // Keep the same placeholder image or use a new one if none exists
      const imageSrc = item.imageSrc || "https://placehold.co/600x400/orange/white?text=Food+Item";
      
      await updateMenuItemInDB(user.uid, {
        ...item,
        imageSrc,
      });
      setEditingItem(null);
      alert("Item updated successfully!");
    } catch (error) {
      console.error("Error updating menu item:", error);
      alert("Failed to update menu item. Please try again.");
    }
  };

  // Handler for deleting an item
  const handleDeleteItem = async (itemId: number) => {
    if (!user || !window.confirm("Are you sure you want to delete this item?")) return;

    try {
      await deleteMenuItemFromDB(user.uid, itemId);
      // Update local state to remove the item
      setMenuItems(prevItems => prevItems.filter(item => item.id !== itemId));
      alert("Item deleted successfully!");
    } catch (error) {
      console.error("Error deleting menu item:", error);
      alert("Failed to delete menu item. Please try again.");
    }
  };

  // Handler for toggling item availability
  const handleToggleAvailability = async (item: MenuItem) => {
    if (!user) return;

    try {
      const updatedItem = { ...item, available: !item.available };
      await updateMenuItemInDB(user.uid, updatedItem);
      // Update local state
      setMenuItems(prevItems =>
        prevItems.map(i => i.id === item.id ? { ...i, available: !i.available } : i)
      );
      alert(`Item marked ${!item.available ? "available" : "unavailable"} successfully!`);
    } catch (error) {
      console.error("Error updating item availability:", error);
      alert("Failed to update item availability. Please try again.");
    }
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900" />
      </div>
    );
  }

  return (
    <div className="space-y-8">
      {/* Header */}
      // ...existing code...
      
      {/* Category Navigation */}
      // ...existing code...
      
      {/* Menu Items Grid */}
      {!isAddingItem && !editingItem && (
        <>
          {filteredItems.length === 0 ? (
            <EmptyState
              title={`No items in "${
                categories.find((c) => c.id === activeCategory)?.name
              }"`}
              description="Add your first menu item to this category."
              action={{
                label: "Add Item",
                onClick: () => setIsAddingItem(true),
              }}
              icon={
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-12 w-12 text-gray-400"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={1}
                    d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"
                  />
                </svg>
              }
            />
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredItems.map((item) => (
                <Card
                  key={item.id}
                  className="h-full hover:shadow-md transition-shadow"
                >
                  {/* Image */}
                  <div className="h-40 bg-gray-200 relative">
                    <img
                      src={item.imageSrc || "https://placehold.co/600x400/orange/white?text=Food+Item"}
                      alt={item.name}
                      className="w-full h-full object-cover"
                    />
                    <div className="absolute top-2 right-2">
                      <Badge
                        variant={item.available ? "success" : "warning"}
                        size="sm"
                      >
                        {item.available ? "Available" : "Unavailable"}
                      </Badge>
                    </div>
                  </div>
                  <CardContent className="p-4">
                    // ...existing code for item content...
                  </CardContent>
                </Card>
              ))}

              // ...existing code for add new item button...
            </div>
          )}
        </>
      )}

      {/* Menu Item Form Modal */}
      // ...existing code for form modal...
    </div>
  );
}
